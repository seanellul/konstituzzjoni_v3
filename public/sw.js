// Constitution.mt Service Worker
// Provides offline capabilities and performance optimizations

const CACHE_NAME = 'constitution-mt-v1.0.0';
const STATIC_CACHE = 'constitution-static-v1';
const DYNAMIC_CACHE = 'constitution-dynamic-v1';

// Resources to cache on install
const STATIC_ASSETS = [
  '/',
  '/constitution',
  '/search',
  '/about',
  '/manifest.json',
  // Add core CSS and JS files (these will be generated by Next.js)
];

// Constitution content that should be cached aggressively
const CONSTITUTION_ROUTES = [
  '/constitution/chapter/',
  '/api/search',
];

self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('[SW] Caching static assets');
        return cache.addAll(STATIC_ASSETS);
      })
      .catch((error) => {
        console.error('[SW] Failed to cache static assets:', error);
      })
  );
  
  // Force the waiting service worker to become the active service worker
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Delete old caches
          if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  
  // Take control of all pages
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Only handle GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Handle constitution content routes
  if (isConstitutionRoute(url.pathname)) {
    event.respondWith(
      handleConstitutionRequest(request)
    );
    return;
  }
  
  // Handle search API requests
  if (url.pathname.startsWith('/api/search')) {
    event.respondWith(
      handleSearchRequest(request)
    );
    return;
  }
  
  // Handle static assets
  if (isStaticAsset(url.pathname)) {
    event.respondWith(
      handleStaticAsset(request)
    );
    return;
  }
  
  // Handle other navigation requests
  if (request.mode === 'navigate') {
    event.respondWith(
      handleNavigation(request)
    );
    return;
  }
});

// Check if URL is a constitution route
function isConstitutionRoute(pathname) {
  return CONSTITUTION_ROUTES.some(route => pathname.startsWith(route));
}

// Check if URL is a static asset
function isStaticAsset(pathname) {
  return /\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$/.test(pathname);
}

// Handle constitution content requests (cache first, then network)
async function handleConstitutionRequest(request) {
  try {
    // Try cache first
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      console.log('[SW] Serving constitution content from cache:', request.url);
      return cachedResponse;
    }
    
    // If not in cache, fetch from network
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // Cache the response
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
      console.log('[SW] Cached constitution content:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.error('[SW] Failed to handle constitution request:', error);
    
    // Return offline page or cached fallback
    return caches.match('/offline.html') || new Response(
      'Offline - Constitution content not available',
      { status: 503, statusText: 'Service Unavailable' }
    );
  }
}

// Handle search requests (network first, then cache)
async function handleSearchRequest(request) {
  try {
    // Try network first for fresh search results
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // Cache successful search responses for 30 minutes
      const cache = await caches.open(DYNAMIC_CACHE);
      const responseClone = networkResponse.clone();
      
      // Add cache timestamp
      const cachedResponse = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: {
          ...responseClone.headers,
          'sw-cached': Date.now().toString(),
          'Cache-Control': 'max-age=1800' // 30 minutes
        }
      });
      
      cache.put(request, cachedResponse);
      console.log('[SW] Cached search result:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.error('[SW] Network failed for search, trying cache:', error);
    
    // Fall back to cache
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      // Check if cached response is still valid (30 minutes)
      const cacheTime = cachedResponse.headers.get('sw-cached');
      if (cacheTime && Date.now() - parseInt(cacheTime) < 30 * 60 * 1000) {
        console.log('[SW] Serving search from cache:', request.url);
        return cachedResponse;
      }
    }
    
    // Return empty search results if offline
    return new Response(JSON.stringify({
      results: [],
      total: 0,
      query: '',
      offline: true
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200
    });
  }
}

// Handle static assets (cache first)
async function handleStaticAsset(request) {
  try {
    // Try cache first
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Fetch from network and cache
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.error('[SW] Failed to handle static asset:', error);
    return new Response('Asset not available offline', { status: 404 });
  }
}

// Handle navigation requests
async function handleNavigation(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      return networkResponse;
    }
    
    // Fall back to cached version or offline page
    const cachedResponse = await caches.match(request);
    return cachedResponse || caches.match('/offline.html') || new Response(
      'Page not available offline',
      { status: 404 }
    );
  } catch (error) {
    // Network failed, try cache
    const cachedResponse = await caches.match(request);
    return cachedResponse || caches.match('/offline.html') || new Response(
      'You are offline',
      { status: 503 }
    );
  }
}

// Handle background sync for analytics
self.addEventListener('sync', (event) => {
  console.log('[SW] Background sync triggered:', event.tag);
  
  if (event.tag === 'analytics-sync') {
    event.waitUntil(syncAnalytics());
  }
});

// Sync offline analytics data
async function syncAnalytics() {
  try {
    // Get offline analytics data from IndexedDB or localStorage
    // This would integrate with the analytics system
    console.log('[SW] Syncing offline analytics data...');
    
    // Implementation would depend on how offline analytics are stored
    // For now, just log the attempt
  } catch (error) {
    console.error('[SW] Failed to sync analytics:', error);
  }
}

// Handle push notifications (future feature)
self.addEventListener('push', (event) => {
  console.log('[SW] Push notification received');
  
  const options = {
    body: 'New updates to the Constitution of Malta',
    icon: '/icon-192x192.png',
    badge: '/badge-72x72.png',
    vibrate: [200, 100, 200],
    data: {
      url: '/'
    }
  };
  
  event.waitUntil(
    self.registration.showNotification('Constitution.mt', options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('[SW] Notification clicked');
  
  event.notification.close();
  
  event.waitUntil(
    clients.openWindow(event.notification.data.url || '/')
  );
});